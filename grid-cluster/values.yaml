---

# -- The cloud provider to which you will deploy this chart. One of: "local", "AWS", "GCP", "Azure"
cloud_provider: "local"

# -- Node management options for each selenium grid node managed by this chart.
nodes:

  # This section will provide you with an overview of theoretically, how many tests
  # you can run concurrently with the base setup. It is simply replicas X concurrency, 
  # and that gives you the estimated number of concurrent tests/sessions you can run 
  # with this cluster.

  chrome:
    # -- Toggle whether chrome nodes should be spun up with the cluster.
    enabled: true

    # -- Specify the number of chrome node pods you want spun up as a base case.
    replicas: 1

    # -- Specify the maximum concurrency level that you want for each node pod.
    concurrency: 1

    # -- Specify the minimum number of replicas for the selenium node pod within the cluster.
    minReplicas: 1

    # -- Specify the maximum number of replicas for the selenium node pod within the cluster.
    maxReplicas: 3

    # -- Specify the scaledown stabilization window for scaling chrome node instances.
    stabilizationWindowSeconds: 30

    # -- Utilization percentage target for scaling number of chrome nodes up or down.
    scalingUtilizationPercentage: 80

    # -- Specify the image for the chrome node instances.
    image: docker.io/selenium/node-chrome:latest

  firefox:
    # -- Toggle whether firefox nodes should be spun up with the cluster.
    enabled: true

    # -- Specify the number of firefox node pods you want spun up as a base case.
    replicas: 1

    # -- Specify the maximum concurrency level that you want for each node pod.
    concurrency: 1

    # -- Specify the minimum number of replicas for the firefox node pod within the cluster.
    minReplicas: 1

    # -- Specify the maximum number of replicas for the firefox node pod within the cluster.
    maxReplicas: 3

    # -- Specify the scaledown stabilization window for scaling firefox node instances.
    stabilizationWindowSeconds: 30

    # -- Utilization percentage target for scaling number of firefox nodes up or down.
    scalingUtilizationPercentage: 80

    # -- Specify the image for the firefox node instances.
    image: docker.io/selenium/node-firefox:latest

  edge:
    # -- Toggle whether edge nodes should be spun up with the cluster.
    enabled: true

    # -- Specify the number of edge node pods you want spun up as a base case.
    replicas: 1

    # -- Specify the maximum concurrency level that you want for each node pod.
    concurrency: 1

    # -- Specify the minimum number of replicas for the edge node pod within the cluster.
    minReplicas: 1

    # -- Specify the maximum number of replicas for the edge node pod within the cluster.
    maxReplicas: 3

    # -- Specify the scaledown stabilization window for scaling edge node instances.
    stabilizationWindowSeconds: 30

    # -- Utilization percentage target for scaling number of edge nodes up or down.
    scalingUtilizationPercentage: 80

    # -- Specify the image for the edge node instances.
    image: docker.io/selenium/node-edge:latest

  resources:
    limits:
      # -- Specify the maximum memory for every selenium node within the cluster.
      memory: "1Gi"

      # -- Specify the maximum cpu for every selenium node within the cluster.
      cpu: "250m"

# -- Hub management options for the hub node managed by this chart. 
hub:

  # -- Specify the image for the hub instance.
  image: docker.io/selenium/hub:4.8.0

  # -- The amount of seconds which a test will be allowed to wait in the queue before being timed out and removed
  session_queue_timeout_sec: 300

  # -- The amount of seconds during which a test is allowed to have no activity before it is killed
  session_timeout_sec: 300

  resources:
    limits:
      # -- Specify the maximum memory for the hub instance within the cluster.
      memory: "1Gi"
  
      # -- Specify the maximum cpu for the hub instance within the cluster.
      cpu: "250m"

cloud_specific_config:


  Azure:
    load_balancer_ip: "none"

# -- Configuration for the selenium grid exporter
exporter:

  # -- Specify the image for the exporter instances.
  image: ghcr.io/fire833/capstone/grid-exporter:latest

  resources:
    limits:
      # -- Specify the maximum memory for the exporter instance within the cluster.
      memory: 30Mi
  
      # -- Specify the maximum cpu for the exporter instance within the cluster.
      cpu: 250m

# -- Override values for the prometheus dependency chart.
prometheus:

  # Disable alertmanager since we just need prometheus for storing time-series.
  alertmanager:
    enabled: false

  # Disable pushgateway since we just need prometheus for storing time-series.
  prometheus-pushgateway:
    enabled: false

  # We don't need the node exporter either
  prometheus-node-exporter:
    enabled: false

  # Or kube-state-metrics
  kube-state-metrics:
    enabled: false

  # We can also just use an emptyDir for persistence with prometheus as well.
  server:
    persistentVolume:
      enabled: false

  serverFiles:
    prometheus.yml:
      scrape_configs:
        - job_name: grid_exporter
          static_configs:
            - targets:
              - exportersvc:8000 # TODO: factor out this port somewhere
          scrape_interval: 1s

# -- Override values for the prometheus-adapter chart.
prometheus-adapter:

  # namespaceOverride: 

  # Url to access prometheus
  prometheus:
    # Value is templated
    url: http://{{ .Release.Name }}-prometheus-server
    port: 80
    path: "/"

  logLevel: 5

  rules:
    default: false
    external:
    - seriesQuery: "selenium_grid_num_nodes"
      metricsQuery: "selenium_grid_num_nodes"
      resources:
        namespaced: false
    - seriesQuery: "selenium_grid_num_sessions_aggregated"
      metricsQuery: "selenium_grid_num_sessions_aggregated"
      resources:
        namespaced: false
    - seriesQuery: "selenium_grid_max_sessions_aggregated"
      metricsQuery: "selenium_grid_max_sessions_aggregated"
      resources:
        namespaced: false
    - seriesQuery: '{__name__=~"^selenium_grid_.*_sessions_aggregated$"}'
      metricsQuery: "(avg_over_time(selenium_grid_num_sessions_aggregated[10s]) / selenium_grid_max_sessions_aggregated) * 100"
      name:
        as: "selenium_grid_session_util_percent"
      resources:
        namespaced: false
    - seriesQuery: '{__name__=~"^selenium_grid_chrome_.*_sessions$"}'
      metricsQuery: "(avg_over_time(selenium_grid_chrome_num_sessions[10s]) / selenium_grid_chrome_max_sessions) * 100"
      name:
        as: "selenium_grid_chrome_session_util_percent"
      resources:
        namespaced: false
    - seriesQuery: '{__name__=~"^selenium_grid_edge_.*_sessions$"}'
      metricsQuery: "(avg_over_time(selenium_grid_edge_num_sessions[10s]) / selenium_grid_edge_max_sessions) * 100"
      name:
        as: "selenium_grid_edge_session_util_percent"
      resources:
        namespaced: false
    - seriesQuery: '{__name__=~"^selenium_grid_firefox_.*_sessions$"}'
      metricsQuery: "(avg_over_time(selenium_grid_firefox_num_sessions[10s]) / selenium_grid_firefox_max_sessions) * 100"
      name:
        as: "selenium_grid_firefox_session_util_percent"
      resources:
        namespaced: false
